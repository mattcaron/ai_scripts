#!/bin/bash

# Default is to just start Ollama and not Stable Diffusion or MusicGPT
START_OLLAMA=1
START_SD=0
REMOTE_SD=0
REMOTE_OLLAMA=0
REMOTE_OPENWEBUI=0
START_REMOTES=1
START_MUSICGPT=0
REMOTE_MUSICGPT=0

# Get our paths
source `dirname $0`/ai_paths

# Window sizes and positions
WINDOW1_GEOMETRY="120x22+110+390"
WINDOW2_GEOMETRY="120x22+110+735"
WINDOW3_GEOMETRY="120x22+980+390"
WINDOW4_GEOMETRY="120x22+980+735"

# Address of my desktop machine with the big GPU. Note that we
# hardcode this in the run* configs, because those support lots of
# machines. BUT, it's possible I build another machine and I want to
# be able to change the remote target in a single place, hence this
# variable.
REMOTE_INSIDE_ADDRESS=bluebox

# Address to get to bluebox from the world. This is a secret, so it's
# not in the repo.
REMOTE_OUTSIDE_ADDRESS=`cat ${HOME}/.bluebox_outside_address`

# Execute getopt on the arguments passed to this program, identified
# by the special character $@
PARSED_OPTIONS=$(getopt -n "$0" -o hnirosmcu --long "help,notext,images,remote-images,remote-ollama,remote-openwebui,music,remote-music,no-remote-start"  -- "$@")

# Bad arguments, something has gone wrong with the getopt command.
if [ $? -ne 0 ]; then
    echo "Failed to parse arguments, exiting."
    exit 1
fi

# A little magic, necessary when using getopt.
eval set -- "$PARSED_OPTIONS"

# Now go through all the options with a case and using shift to
# analyse 1 argument at a time.
#
# $1 identifies the first argument, and when we use shift we discard
# the first argument, so $2 becomes $1 and goes again through the
# case.
while true
do
    case "$1" in
        
        -h|--help)
            echo "Usage $0 [options]"
            echo ""
            echo "With no options supplied, it only starts ollama and open-webui."
            echo ""
            echo "Options:"
            echo "    --help = print this help"
            echo "    --notext = don't run Ollama and Open-Webui"
            echo "    --images = run Stable Diffusion"
            echo "    --remote-images = start and then connect to a remote Stable Diffusion server"
            echo "    --remote-ollama = start and then connect to a remote Ollama server"
            echo "    --remote-openwebui = start and then connect to a remote Open WebUi server"
            echo "    --music = run MusicGPT"
            echo "    --remote-music = start and then connect to a remote MusicGPT server"
            echo "    --no-remote-start = don't start the above three remote servers, just connect to existing instances"
            exit 0
            shift;;
        
        -n|--notext)
            START_OLLAMA=0
            shift;;
        
        -i|--images)
            START_SD=1
            shift;;

        -r|--remote-images)
            REMOTE_SD=1
            shift;;

        -o|--remote-ollama)
            REMOTE_OLLAMA=1
            shift;;

        -u|--remote-openwebui)
            REMOTE_OPENWEBUI=1
            shift;;

        -s|--no-remote-start)
            START_REMOTES=0
            shift;;

        -m|--music)
            START_MUSICGPT=1
            shift;;

        -c|--remote-music)
            REMOTE_MUSICGPT=1
            shift;;

        --)
            shift
            break;;
    esac
done

if [[ $START_OLLAMA -eq 0 && $START_SD -eq 0 && $REMOTE_SD -eq 0 && $START_MUSICGPT -eq 0 && $REMOTE_MUSICGPT -eq 0 ]]; then   
    echo "Warning: Options selected result in a no-op. Doing nothing as requested."
    exit 0
fi

if [[ $START_SD -eq 1 && $REMOTE_SD -eq 1 ]]; then
    echo "ERROR: Incorrect arguments - we cannot use both local and remote Stable Diffusion."
    exit 1
fi

if [[ $START_MUSICGPT -eq 1 && $REMOTE_MUSICGPT -eq 1 ]]; then
    echo "ERROR: Incorrect arguments - we cannot use both local and remote MusicGPT."
    exit 1
fi

# determine if we are inside our outside our home network

are_we_inside() {
    ping -q -c 1 ${REMOTE_INSIDE_ADDRESS} > /dev/null 2>&1 
    # A 0 return code means a successful ping, therefore we are inside
    if [ $? -eq 0 ]; then
        echo "We are inside the house."
        return 1
    else
        echo "We are outside the house."
        echo "WARNING: Services started via jumphost tend to remain running when we close the connection on our end."
        echo "You will need to ssh in and kill them manually."
        return 0
    fi
}

# Only check to see if we're inside if a remote option was selected.
if [[ $REMOTE_SD -eq 1 || $REMOTE_OLLAMA -eq 1 || $REMOTE_OPENWEBUI -eq 1 || $REMOTE_MUSICGPT -eq 1 ]]; then
    are_we_inside
    INSIDE=$?
else
    INSIDE=1
fi

HOSTNAME=`hostname`

if [ $HOSTNAME == "hiro" ]; then
    echo "Running on hiro, using that config."

    if [[ $START_SD -eq 1 && $START_OLLAMA -eq 1 ]]; then
        echo "WARNING: The video card on this machine is too weak to run both of these at once."
        echo "         One will almost certainly fail to start. Proceeding anyway."
    fi

    # This machine's GPU is super slow, so use a lean and fast model.
    # TODO - once an uncensored version if this is out, use it.
    DEFAULT_OLLAMA_MODELS="llama3.2:1b"
elif [ $HOSTNAME == "bluebox" ]; then
    echo "Running on bluebox, using that config."

    # My preferred uncensored model.
    DEFAULT_OLLAMA_MODELS="dolphin-llama3:latest"
else
    echo "Unknown host, using default config."
fi

shutdown() {
   if [[ $REMOTE_OLLAMA -eq 1 || $REMOTE_SD -eq 1 || $REMOTE_MUSICGPT -eq 1 ]]; then
    ssh-add -d ~/.ssh/id_rsa
   fi
   jobs -p | xargs kill -INT
}

# send SIGINT (CTRL-C) to all subprocesses when this one exits.
trap 'shutdown' EXIT

# If any remote options are selected, preload my ssh key to save repetitive typing
if [[ $REMOTE_OLLAMA -eq 1 || $REMOTE_SD -eq 1 || $REMOTE_MUSICGPT -eq 1 ]]; then
    ssh-add ~/.ssh/id_rsa
fi

# export everything we're about to set because, from here on, it's
# configuration for what we are about to start.
set -a

if [ $START_OLLAMA -eq 1 ]; then

    if [ $REMOTE_OLLAMA -eq 1 ]; then

        if [ $START_REMOTES -eq 1 ]; then
            OLLAMA_CMD="runollama"
        else
            OLLAMA_CMD=""
        fi
        
        if [ $INSIDE -eq 1 ]; then
            echo "Starting remote Ollama on 127.0.0.1:11434"
            xterm -geometry ${WINDOW1_GEOMETRY} -e "ssh -t -L 11434:localhost:11434 ${REMOTE_INSIDE_ADDRESS} '${OLLAMA_CMD}'" &
        else
            echo "Starting remote Ollama on 127.0.0.1:11434 via jumphost ${REMOTE_OUTSIDE_ADDRESS}"
            xterm -geometry ${WINDOW1_GEOMETRY} -e "ssh -t -L 11434:localhost:11434 ${REMOTE_OUTSIDE_ADDRESS} 'ssh -L 11434:localhost:11434 ${REMOTE_INSIDE_ADDRESS} ${OLLAMA_CMD}'" &
        fi
        
    else
        echo "Starting local Ollama on 127.0.0.1:11434"
        xterm -geometry ${WINDOW1_GEOMETRY} -e runollama  &
    fi

    OPENWEBUI_ARGS=""
    if [[ $START_SD -eq 1 || $REMOTE_SD -eq 1 ]]; then
        OPENWEBUI_ARGS="--stable-diffusion"
    fi

    if [ $REMOTE_OPENWEBUI -eq 1 ]; then

        if [ $START_REMOTES -eq 1 ]; then
            OPENWEBUI_CMD="runopenwebui ${OPENWEBUI_ARGS}"
        else
            OPENWEBUI_CMD=""
        fi
        
        if [ $INSIDE -eq 1 ]; then
            echo "Starting remote Open WebUI on 127.0.0.1:8080"
            xterm -geometry ${WINDOW2_GEOMETRY} -e "ssh -t -L 8080:localhost:8080 ${REMOTE_INSIDE_ADDRESS} '${OPENWEBUI_CMD}'" &
        else
            echo "Starting remote Open WebUI on 127.0.0.1:8080 via jumphost ${REMOTE_OUTSIDE_ADDRESS}"
            xterm -geometry ${WINDOW2_GEOMETRY} -e "ssh -t -L 8080:localhost:8080 ${REMOTE_OUTSIDE_ADDRESS} 'ssh -L 8080:localhost:8080 ${REMOTE_INSIDE_ADDRESS} ${OPENWEBUI_CMD}'" &
        fi
        
    else
        echo "Starting local Open WebUI on 127.0.0.1:8080"
        xterm -geometry ${WINDOW2_GEOMETRY} -e runopenwebui ${OPENWEBUI_ARGS}  &
    fi
fi

if [ $START_SD -eq 1 ]; then
    echo "Starting local Stable Diffusion on 127.0.0.1:7860"
    xterm -geometry ${WINDOW3_GEOMETRY} -e runsd &
fi

if [ $REMOTE_SD -eq 1 ]; then
        if [ $START_REMOTES -eq 1 ]; then
            SD_CMD="runsd"
        else
            SD__CMD=""
        fi
    
    if [ $INSIDE -eq 1 ]; then
        echo "Starting remote Stable Diffusion forwarded to 127.0.0.1:7860"
        xterm -geometry ${WINDOW3_GEOMETRY} -e "ssh -t -L 7860:localhost:7860 ${REMOTE_INSIDE_ADDRESS} '${SD_CMD}'" &
    else
        echo "Starting remote Stable Diffusion forwarded to 127.0.0.1:7860 via jumphost ${REMOTE_OUTSIDE_ADDRESS}"
        xterm -geometry ${WINDOW3_GEOMETRY} -e "ssh -t -L 7860:localhost:7860 ${REMOTE_OUTSIDE_ADDRESS} 'ssh -L 7860:localhost:7860 ${REMOTE_INSIDE_ADDRESS} ${SD_CMD}'" &
    fi
fi

if [ $START_MUSICGPT -eq 1 ]; then
    echo "Starting local MusicGPT on  http://localhost:8642"
    xterm -geometry ${WINDOW4_GEOMETRY} -e runmusicgpt &
fi

if [ $REMOTE_MUSICGPT -eq 1 ]; then
        if [ $START_REMOTES -eq 1 ]; then
            MUSICGPT_CMD="runmusicgpt"
        else
            MUSICGPT_CMD=""
        fi

    if [ $INSIDE -eq 1 ]; then
        echo "Starting remote MusicGPT forwarded to 127.0.0.1:8642"
        xterm -geometry ${WINDOW4_GEOMETRY} -e "ssh -t -L 8642:localhost:8642 ${REMOTE_INSIDE_ADDRESS} '${MUSICGPT_CMD}'" &
    else
        echo "Starting remote stable diffusion forwarded to 127.0.0.1:8642 via jumphost ${REMOTE_OUTSIDE_ADDRESS}"
        xterm -geometry ${WINDOW4_GEOMETRY} -e "ssh -t -L 8642:localhost:8642 ${REMOTE_OUTSIDE_ADDRESS} 'ssh -L 8642:localhost:8642 ${REMOTE_INSIDE_ADDRESS} ${MUSICGPT_CMD}'" &
    fi
fi

echo "Hit CTRL-C to kill all the AI things..."
while true
do
    sleep 24h
done
