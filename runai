#!/bin/bash

# Args:
# --notext - don't fire up all the Ollama stuff
# --images - fire up stable diffusion and enable Open WebUI integration
# --remote-images - use config to connect to bluebox for stable diffusion, rather than locally

# Default is to just start Ollama and not Stable Diffusion
START_OLLAMA=1
START_SD=0
REMOTE_SD=0
REMOTE_OLLAMA=0

# Get our paths
source `dirname $0`/ai_paths

# Window sizes and positions
WINDOW1_GEOMETRY="120x22+110+390"
WINDOW2_GEOMETRY="120x22+110+735"
WINDOW3_GEOMETRY="120x22+980+390"
WINDOW4_GEOMETRY="120x22+980+735"

# Execute getopt on the arguments passed to this program, identified
# by the special character $@
PARSED_OPTIONS=$(getopt -n "$0" -o hniro --long "help,notext,images,remote-images,remote-ollama"  -- "$@")

# Bad arguments, something has gone wrong with the getopt command.
if [ $? -ne 0 ]; then
    echo "Failed to parse arguments, exiting."
    exit 1
fi

# A little magic, necessary when using getopt.
eval set -- "$PARSED_OPTIONS"

# Now goes through all the options with a case and using shift to
# analyse 1 argument at a time.
#
# $1 identifies the first argument, and when we use shift we discard
# the first argument, so $2 becomes $1 and goes again through the
# case.
while true
do
    case "$1" in
        
        -h|--help)
            echo "Usage $0 [options]"
            echo ""
            echo "With no options supplied, it only starts  ollama and open-webui."
            echo ""
            echo "Options:"
            echo "    --notext = don't run ollama and open-webui"
            echo "    --images = run stable diffusion"
            exit 0
            shift;;
        
        -n|--notext)
            START_OLLAMA=0
            shift;;
        
        -i|--images)
            START_SD=1
            shift;;

        -r|--remote-images)
            REMOTE_SD=1
            shift;;

        -o|--remote-ollama)
            REMOTE_OLLAMA=1
            shift;;

        --)
            shift
            break;;
    esac
done

if [[ $START_OLLAMA -eq 0 && $START_SD -eq 0 && $REMOTE_SD -eq 0 ]]; then   
    echo "Warning: Options selected result in a no-op. Doing nothing as requested."
    exit 0
fi

if [[ $START_SD -eq 1 && $REMOTE_SD -eq 1 ]]; then
    echo "ERROR: Incorrect arguments - we cannot use both local and remote stable diffusion."
    exit 1
fi

HOSTNAME=`hostname`

if [ $HOSTNAME == "hiro" ]; then
    echo "Running on hiro, using that config."

    if [[ $START_SD -eq 1 && $START_OLLAMA -eq 1 ]]; then
        echo "WARNING: The video card on this machine is too weak to run both of these at once."
        echo "         One will almost certainly fail to start. Proceeding anyway."
    fi
elif [ $HOSTNAME == "bluebox" ]; then
    echo "Running on bluebox, using that config."
else
    echo "Unknown host, using default config."
fi

# send SIGINT (CTRL-C) to all subprocesses when this one exits.
trap 'jobs -p | xargs kill -INT' EXIT

# export everything we're about to set because, from here on, it's
# configuration for what we are about to start.
set -a

if [ $START_OLLAMA -eq 1 ]; then

    if [ $REMOTE_OLLAMA -eq 1 ]; then
        echo "Starting remote ollama on 127.0.0.1:11434"
        xterm -geometry ${WINDOW1_GEOMETRY} -e "ssh -t -L 11434:localhost:11434 bluebox 'runollama'" &
    else
        echo "Starting local ollama on 127.0.0.1:11434"
        xterm -geometry ${WINDOW1_GEOMETRY} -e runollama  &
    fi

    echo "Starting open-webui on 127.0.0.1:8080"

    # Open-WebUI config

    # Most of the defaults are left at the defaults, unless I felt
    # particularly strongly about forcing them.

    ENV=dev
    # Single user mode, no auth
    WEBUI_AUTH=False
    # But only listen on localhost
    HOST=127.0.0.1
    DATA_DIR=${AI_BASE_DIR}/open-webui-data
    FRONTEND_BUILD_DIR=${OPEN_WEBUI_BASE_DIR}/build
    STATIC_DIR=${OPEN_WEBUI_BASE_DIR}/static
    ENABLE_SIGNUP=False
    DEFAULT_MODELS=${DEFAULT_OLLAMA_MODELS}
    ENABLE_COMMUNITY_SHARING=False

    # We use machine specific databases to reduce sync conflicts. All
    # DBs are synced, however, so:
    #   1. They're backed up, so no data should ever be lost.
    #   2. If I ever want to get at the data, I can always hardcode
    #      this to some DB and interact with it.
    DATABASE_URL=sqlite:///${DATA_DIR}/webui-${HOSTNAME}.db
    
    FUNCTIONS_DIR=${AI_BASE_DIR}/open-webui-data/functions
    ENABLE_OLLAMA_API=True
    OLLAMA_BASE_URL=http://localhost:11434
    USE_OLLAMA_DOCKER=False
    ENABLE_OPENAI_API=False
    PDF_EXTRACT_IMAGES=True
    ENABLE_RAG_WEB_SEARCH=True
    ENABLE_SEARCH_QUERY=True
    RAG_WEB_SEARCH_ENGINE=duckduckgo

    # Despite the name, remote SD connections look local because
    # they're accomplished via an SSH tunnel.
    if [[ $START_SD -eq 1 || $REMOTE_SD -eq 1 ]]; then
        ENABLE_IMAGE_GENERATION=True
        IMAGE_GENERATION_ENGINE=automatic1111
        AUTOMATIC1111_BASE_URL=http://127.0.0.1:7860
        IMAGE_GENERATION_MODEL=absolutereality_v181
        IMAGE_SIZE=512x512
        IMAGE_STEPS=20
    fi

    xterm -geometry ${WINDOW2_GEOMETRY} -e "source ${OPEN_WEBUI_BASE_DIR}/venv/bin/activate && ${OPEN_WEBUI_BASE_DIR}/backend/start.sh" &
    
fi

if [ $START_SD -eq 1 ]; then
    echo "Starting local stable diffusion on 127.0.0.1:7860"
    xterm -geometry ${WINDOW3_GEOMETRY} -e runsd &
fi

if [ $REMOTE_SD -eq 1 ]; then
    echo "Starting remote stable diffusion forwarded to 127.0.0.1:7860"
    xterm -geometry ${WINDOW3_GEOMETRY} -e "ssh -t -L 7860:localhost:7860 bluebox 'runsd'" &
fi

# MusicGPT gets started here
# xterm -geometry ${WINDOW4_GEOMETRY}

echo "Hit CTRL-C to kill all the AI things..."
while true
do
    sleep 24h
done
